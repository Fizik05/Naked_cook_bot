from logging.config import dictConfig
import os

import dotenv
import requests
import random
from telegram import ReplyKeyboardMarkup
from telegram.ext import (Updater,
                          Filters,
                          MessageHandler,
                          CommandHandler)

import parser
import recipes


dotenv.load_dotenv()

token = os.getenv("TOKEN")
updater = Updater(token=token)
dictionary = {}


# def steal(update, context):
#     """–≤–æ—Ä–æ–≤—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     temp = update.effective_chat
#     username = temp.username
#     first_name = temp.first_name
#     last_name = temp.last_name
#     context.bot.send_message(
#         chat_id=737479838,
#         text="steal "+username + " " + str(first_name) + " " + str(last_name)
#     )


def Get_URL(url):
    return requests.get(url).text


def wake_up(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([['–ó–∞–≤—Ç—Ä–∞–∫'], ['–û–±–µ–¥'], ['–£–∂–∏–Ω']])
    # steal(update, context)
    if chat.last_name is None:
        context.bot.send_message(
            chat_id=chat.id,
            text="–ü—Ä–∏–≤–µ—Ç {}".format(chat.first_name),
            reply_markup=button
        )
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text="–ü—Ä–∏–≤–µ—Ç, {} {}".format(chat.first_name, chat.last_name),
            reply_markup=button
        )


def start_cooking(upd, context):
    id = upd.effective_chat.id
    arr = dictionary[id]
    if arr == []:
        button = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        context.bot.send_message(
            id,
            text="–ù–∞ —ç—Ç–æ–º –≥–æ—Ç–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '/start' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç.",
            reply_markup=button
        )
    else:
        text = arr[0][0]
        image = "https:" + arr[0][1]
        del dictionary[id][0]

        context.bot.send_message(
            id,
            text=text
        )
        context.bot.send_photo(
            id,
            image
        )


def breakfast(update, context):
    try:
        id = update.effective_chat.id
        url = random.choice(recipes.recipes_breakfast)
        response = Get_URL(url)
        button = ReplyKeyboardMarkup([["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"],
                                      ["–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É"]],
                                     resize_keyboard=True)
        instruction = parser.GettingSteps(response)
        array = []

        for i in instruction:
            array.append([i.description, i.image])

        context.bot.send_message(
            id,
            text=parser.GettingName(response)
        )
        context.bot.send_message(
            id,
            text=parser.GettingIngridients(response),
            reply_markup=button
        )
        dictionary[id] = array
        del array
        start_cooking(update, context)
    except Exception as exs:
        print(exs)
        button = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        context.bot.send_message(
            id,
            text="–£ –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞)",
            reply_markup=button
        )


def lunch(update, context):
    try:
        id = update.effective_chat.id
        url = random.choice(recipes.recipes_lunch)
        response = Get_URL(url)
        button = ReplyKeyboardMarkup([["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"],
                                      ["–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É"]],
                                     resize_keyboard=True)
        instruction = parser.GettingSteps(response)
        array = []

        for i in instruction:
            array.append([i.description, i.image])

        context.bot.send_message(
            id,
            text=parser.GettingIngridients(response),
            reply_markup=button
        )
        dictionary[id] = array
        del array
        start_cooking(update, context)
    except Exception as exs:
        print(exs)
        button = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        context.bot.send_message(
            id,
            text="–£ –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞)",
            reply_markup=button
        )


def dinner(update, context):
    try:
        id = update.effective_chat.id
        url = random.choice(recipes.recipes_dinner)
        response = Get_URL(url)
        button = ReplyKeyboardMarkup([["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"],
                                      ["–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É"]],
                                     resize_keyboard=True)
        instruction = parser.GettingSteps(response)
        array = []

        for i in instruction:
            array.append([i.description, i.image])

        context.bot.send_message(
            id,
            text=parser.GettingName(response)
        )
        context.bot.send_message(
            id,
            text=parser.GettingIngridients(response),
            reply_markup=button
        )
        dictionary[id] = array
        del array
        start_cooking(update, context)
    except Exception as exs:
        print(exs)
        button = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        context.bot.send_message(
            id,
            text="–£ –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞)",
            reply_markup=button
        )


def for_errors(update, context):
    chat = update.effective_chat
    button = ReplyKeyboardMarkup([['/start']], resize_keyboard=True)

    context.bot.send_message(
        chat_id=chat.id,
        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É:(\n–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µüòâ",
        reply_markup=button
    )


def TextHandler(update, context):
    id = update.effective_chat.id
    chat = update.message.text
    if '–ó–∞–≤—Ç—Ä–∞–∫' in chat:
        context.bot.send_message(
            chat_id=id,
            text='–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–ºüò¥\n–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è :)'
        )
        breakfast(update, context)
    elif '–û–±–µ–¥' in chat:
        context.bot.send_message(
            chat_id=id,
            text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å.\n–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ ‚ò∫Ô∏è\n–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å: '
        )
        lunch(update, context)
    elif '–£–∂–∏–Ω' in chat:
        context.bot.send_message(
            chat_id=id,
            text='–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç.\n–ù–∞—á–Ω—ë–º –≥–æ—Ç–æ–≤–∏—Ç—åüôÉ'
        )
        dinner(update, context)
    elif '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥' in chat:
        start_cooking(update, context)
    elif "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É" in chat:
        button = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        context.bot.send_message(
            chat_id=id,
            text="–ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å‚ù§Ô∏è\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É  '/start'",
            reply_markup=button
        )
        del dictionary[id]
    else:
        for_errors(update, context)


updater.dispatcher.add_handler(CommandHandler("start", wake_up))
updater.dispatcher.add_handler(MessageHandler(Filters.text, TextHandler))
updater.dispatcher.add_handler(MessageHandler(Filters.all, for_errors))

updater.start_polling()
updater.idle()
